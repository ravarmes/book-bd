# CAP√çTULO 2 ‚Äì Modelagem Conceitual de Dados: O *Blueprint* do Banco

O **Modelo Entidade-Relacionamento (ER)** √© um modelo conceitual popular de alto n√≠vel, frequentemente empregado no projeto conceitual de aplica√ß√µes de banco de dados. A modelagem conceitual √© a primeira etapa do projeto de BD e deve ser de **alto n√≠vel**, ou seja, pr√≥xima da realidade do usu√°rio e de f√°cil entendimento. O modelo conceitual serve como uma descri√ß√£o precisa dos dados, omitindo detalhes de implementa√ß√£o, e √© um meio de comunica√ß√£o n√£o amb√≠guo entre usu√°rios e desenvolvedores.

üß© **Ferramenta:** brModelo (Web)
(O processo de modelagem √© comum a diversas ferramentas CASE ‚Äî Computer-Aided Software Engineering ‚Äî que auxiliam na cria√ß√£o de modelos ER, como o MySQL Workbench e o ERDPlus. O `brModelo` √© uma dessas ferramentas.)

## 2.1 Entidades, Relacionamentos e Atributos.

O modelo ER descreve tr√™s conceitos principais: entidades, atributos e relacionamentos.

### Entidades
Uma **entidade** √© definida como uma coisa ou objeto no mundo real com uma exist√™ncia independente. Entidades podem ter exist√™ncia f√≠sica (ex: pessoa, carro) ou conceitual (ex: curso, projeto).

Um **tipo de entidade** define uma cole√ß√£o (ou conjunto) de entidades que compartilham os mesmos atributos. A cole√ß√£o de todos os elementos de um tipo de entidade √© chamada de **conjunto da entidade**.

Nos diagramas ER, o tipo de entidade √© representado graficamente como um **ret√¢ngulo** encapsulando seu nome.

### Atributos
**Atributos** s√£o as propriedades que descrevem uma entidade. Para cada atributo, existe um **dom√≠nio** (conjunto de valores) que especifica os valores que podem ser atribu√≠dos a ele (e.g., o dom√≠nio do atributo *sal√°rio* de um professor √© o conjunto de n√∫meros decimais n√£o-negativos). Os nomes dos atributos s√£o representados em forma **oval** e conectados √† entidade.

Tipos de atributos:
1.  **Simples (At√¥micos) ou Compostos:** Atributos **compostos** podem ser divididos em subpartes menores (e.g., o endere√ßo pode ser subdividido em rua, n√∫mero, cidade). Atributos que n√£o podem ser divididos s√£o **simples**.
2.  **Valor-√önico ou Multi-Valorados:** A maioria dos atributos possui um valor √∫nico (*monovalorado*). Atributos que podem ter um **conjunto de valores** para a mesma entidade (e.g., um professor pode ter v√°rias titula√ß√µes ou telefones) s√£o **multi-valorados**. Atributos multi-valorados s√£o representados por **ovais duplos**.
3.  **Armazenados ou Derivados:** O atributo **derivado** √© aquele cujo valor pode ser calculado (deriv√°vel) a partir de outro atributo **armazenado** (e.g., *idade* pode ser derivada de *data de nascimento*).

### Relacionamentos
Um **relacionamento** √© uma associa√ß√£o entre duas ou mais entidades com um significado espec√≠fico. O conjunto de todos os elementos de um tipo de relacionamento √© chamado **conjunto do relacionamento**.

Nos diagramas ER, os tipos de relacionamentos s√£o representados como **losangos** conectados por linhas retas √†s entidades participantes.

*   **Grau do Relacionamento:** √â o n√∫mero de entidades que participam do relacionamento. O relacionamento de grau dois √© chamado **bin√°rio** (o mais comum), e o de grau tr√™s, **tern√°rio**.
*   **Pap√©is e Recursividade:** Cada entidade participante tem um **papel** (e.g., empregado, empregador). Um relacionamento √© **recursivo** quando a mesma entidade participa mais de uma vez, mas em pap√©is distintos (e.g., <em>disciplina</em> participa em <em>prerequisito</em> como "depende de" e "√© necess√°ria para").
*   **Atributos de Relacionamentos:** Relacionamentos tamb√©m podem ter atributos descritivos que descrevem a associa√ß√£o em si (e.g., a *Nota* que um aluno obteve em uma *Oferta* de disciplina).

## 2.2 Cardinalidade, Participa√ß√£o e Regras de Integridade.

Relacionamentos em um ER possuem **restri√ß√µes estruturais**, que limitam o n√∫mero de entidades que podem participar.

### Restri√ß√µes Estruturais (Cardinalidade e Participa√ß√£o)
1.  **Taxa de Cardinalidade (M√°xima):** Representa o n√∫mero m√°ximo de inst√¢ncias de um relacionamento em que uma entidade pode participar. Para relacionamentos bin√°rios, as taxas s√£o:
    *   **1:1 (Um para Um):** Uma inst√¢ncia de E1 se relaciona a, no m√°ximo, uma inst√¢ncia de E2, e vice-versa (e.g., *DEPARTAMENTO OFERECE CURSO*).
    *   **1:N ou N:1 (Um para Muitos/Muitos para Um):** Uma inst√¢ncia de E1 pode se relacionar a N inst√¢ncias de E2, mas uma inst√¢ncia de E2 se relaciona a, no m√°ximo, uma de E1 (e.g., *DEPARTAMENTO TRABALHA PROFESSOR*).
    *   **M:N (Muitos para Muitos):** Uma inst√¢ncia de E1 pode se relacionar a N inst√¢ncias de E2, e vice-versa (e.g., *CURSO CONTEM DISCIPLINA*).
    A nota√ß√£o gr√°fica usa um tra√ßo para indicar participa√ß√£o individual (1) e uma ponta tripla (pata de galinha) para indicar participa√ß√£o de N elementos.

2.  **Restri√ß√µes de Participa√ß√£o (M√≠nima):** Especifica o n√∫mero m√≠nimo de entidades que devem participar do relacionamento, determinando se a participa√ß√£o √© obrigat√≥ria.
    *   **Participa√ß√£o Total (Obrigat√≥ria):** A exist√™ncia de uma entidade *depende* de sua participa√ß√£o no relacionamento (m√≠nimo = 1). Ex: Se todo PROFESSOR tem que trabalhar para um DEPARTAMENTO, a participa√ß√£o de PROFESSOR em TRABALHA √© total.
    *   **Participa√ß√£o Parcial (Opcional):** A entidade pode existir sem participar do relacionamento (m√≠nimo = 0). Ex: Um DEPARTAMENTO pode ou n√£o OFERECER um CURSO.
    Graficamente, a participa√ß√£o total √© representada por um **c√≠rculo** (ou linha dupla em algumas nota√ß√µes) e a parcial, por um **tra√ßo**.

### Regras de Integridade
*   **Atributos Chave:** S√£o atributos ou conjuntos de atributos que devem ser distintos para cada registro, utilizados para identificar uma entidade unicamente. O atributo chave √© sublinhado no diagrama ER. A chave prim√°ria (PK) √© a chave candidata escolhida para identificar unicamente a entidade.

*   **Entidades Fracas:** S√£o entidades que **n√£o possuem atributos chave pr√≥prios**. Elas s√£o identificadas em combina√ß√£o com a chave prim√°ria de sua **entidade proprietaria** e sua **chave parcial**.
    *   O relacionamento que conecta a entidade fraca √† propriet√°ria √© o **relacionamento identificador**.
    *   Uma entidade fraca sempre tem **participa√ß√£o total** no relacionamento identificador.
    *   Entidades fracas e seus relacionamentos identificadores s√£o representados por **linhas duplas** no ret√¢ngulo e no losango. Ex: <em>dependente</em> √© uma entidade fraca de <em>professor</em>.

*   **Integridade Referencial:** √â garantida pelo uso de **Chaves Estrangeiras (FK)** no modelo relacional subsequente. Essa restri√ß√£o assegura que o valor de um atributo em uma tabela que faz refer√™ncia a outra (FK) exista como chave prim√°ria na tabela referenciada (PK).

## 2.3 Normaliza√ß√£o Inicial e Boas Pr√°ticas de Modelagem.

A **normaliza√ß√£o** √© o processo de an√°lise de esquemas relacionais para minimizar a **redund√¢ncia** de dados e reduzir **anomalias** (de inser√ß√£o, atualiza√ß√£o e exclus√£o). A redund√¢ncia desperdi√ßa espa√ßo de armazenamento e leva √† inconsist√™ncia se os dados n√£o forem atualizados em todos os locais onde est√£o armazenados.

As **Formas Normais (FNs)** s√£o regras que avaliam se a estrutura do BD est√° bem delineada. Geralmente, o projeto conceitual √© refinado at√© atingir a Terceira Forma Normal (3FN).

### As Tr√™s Primeiras Formas Normais
1.  **Primeira Forma Normal (1FN):** Uma tabela est√° na 1FN se todos os atributos contiverem apenas **dados at√¥micos**. Isso significa que n√£o deve haver atributos multivalorados ou compostos. Para resolver atributos multivalorados, cria-se uma nova tabela que armazena os valores repetidos e se relaciona com a tabela original.
2.  **Segunda Forma Normal (2FN):** Uma tabela deve estar na 1FN e **n√£o possuir depend√™ncia funcional parcial**. Isso se aplica a tabelas com chaves prim√°rias compostas. Se um atributo n√£o-chave depender de apenas uma parte da chave prim√°ria composta, a tabela n√£o est√° na 2FN. A solu√ß√£o √© isolar os atributos com depend√™ncia parcial em novas tabelas.
3.  **Terceira Forma Normal (3FN):** Uma tabela deve estar na 2FN e **n√£o possuir depend√™ncia funcional transitiva**. Depend√™ncia transitiva ocorre quando um atributo n√£o-chave depende de outro atributo n√£o-chave (que n√£o √© a chave prim√°ria). A solu√ß√£o √© criar uma nova tabela para o atributo e a coluna de depend√™ncia.

### Boas Pr√°ticas de Modelagem
√â essencial garantir a unicidade de registros (Chaves Prim√°rias) e a integridade referencial atrav√©s dos relacionamentos (Chaves Estrangeiras). Embora existam modelos de normaliza√ß√£o mais avan√ßados (4FN e 5FN), a 3FN √© frequentemente suficiente para a maioria dos projetos.

## 2.4 Construindo o Diagrama Entidade-Relacionamento (ER) no brModelo.

A modelagem ER √© um processo que transforma a descri√ß√£o do **mini-mundo** (a realidade a ser representada) em um esquema diagram√°tico.

**Passos t√≠picos para a constru√ß√£o do DER (aplic√°veis em ferramentas como o brModelo):**

1.  **An√°lise de Requisitos:** Entender o mini-mundo, identificando o que deve ser armazenado e quais s√£o as opera√ß√µes necess√°rias.
2.  **Identifica√ß√£o dos Tipos de Entidade:** Encontrar os "objetos" principais (substantivos) do sistema.
3.  **Defini√ß√£o de Atributos e Chaves:** Atribuir propriedades (ovais) a cada entidade (ret√¢ngulo) e definir a chave prim√°ria (atributo sublinhado). Resolver atributos compostos e multivalorados, se necess√°rio.
4.  **Identifica√ß√£o dos Relacionamentos:** Definir as associa√ß√µes l√≥gicas (losangos) entre as entidades.
5.  **Defini√ß√£o das Restri√ß√µes Estruturais:** Atribuir as cardinalidades (1:1, 1:N, M:N) e as participa√ß√µes (parcial/total).
6.  **Refinamento:** Identificar e modelar entidades fracas, atributos de relacionamentos, e garantir que o modelo reflita as regras de neg√≥cio e minimize a redund√¢ncia (Normaliza√ß√£o Inicial).

## 2.5 Estudo de Caso (E.C.): ER da Biblioteca

O sistema de biblioteca √© um dom√≠nio cl√°ssico de BD que envolve a gest√£o de livros, usu√°rios (alunos/clientes) e empr√©stimos.

**Requisitos essenciais para o ER da biblioteca:**
*   A biblioteca mant√©m o cadastro de <em>livro</em>.
*   Os <em>aluno</em> est√£o cadastrados como usu√°rios da biblioteca.
*   Deve-se registrar o relacionamento <em>emprestimo</em> de livros por alunos.

**Modelagem Conceitual:**
1.  **Entidades Principais:**
    *   <strong>livro</strong> (<u>cod_livro</u>, titulo, autor, edicao).
    *   <strong>aluno</strong> (<u>matricula</u>, nome, telefone, endereco).
2.  **Relacionamento:**
    *   <strong>empresta</strong> (entre <em>livro</em> e <em>aluno</em>).
3.  **Cardinalidade e Participa√ß√£o:**
    *   Um <em>aluno</em> pode emprestar <strong>M</strong> (muitos) livros.
    *   Um <em>livro</em> pode ser emprestado por <strong>N</strong> (muitos) <em>alunos</em> (ao longo do tempo).
    *   Portanto, a cardinalidade √© **M:N**.
    *   O relacionamento <em>empresta</em> deve ter atributos descritivos: <code>data_emprestimo</code>, <code>data_devolucao_prevista</code>, <code>data_devolucao_efetiva</code>.

**Esbo√ßo do ER da biblioteca (conceitual):**
(aluno) --- (M) -- <empresta> -- (N) --- (livro)
*O relacionamento M:N <code>empresta</code> pode ser transformado em uma tabela associativa no modelo l√≥gico, contendo as chaves prim√°rias de <em>aluno</em> e <em>livro</em> como chaves estrangeiras, mais os atributos descritivos do empr√©stimo.*

## 2.6 EXERC√çCIOS COMPLEMENTARES (E.C.): Modelagem de problemas de baixa complexidade (Ex: Barbearia).

Estes exerc√≠cios visam fixar os conceitos de Entidades, Atributos, Relacionamentos, Cardinalidade e Chaves em diferentes dom√≠nios.

**Exemplo 1: Sistema para barbearia**
Modele o sistema de uma barbearia que precisa gerenciar:
1.  <strong>cliente</strong> (nome, telefone, historico_cortes, cpf).
2.  <strong>barbeiro</strong> (nome, especialidade, salario).
3.  <strong>servico</strong> (nome, preco, duracao).
4.  <strong>agendamento</strong> (data, hora).
*   *Desafio de modelagem:* defina como os clientes se relacionam com os barbeiros e os servi√ßos atrav√©s do agendamento, e defina as cardinalidades (ex.: um cliente pode ser atendido por v√°rios barbeiros? um barbeiro pode realizar v√°rios servi√ßos?).

**Exemplo 2: Modelo de banco de dados empresa**
Modele o sistema de uma empresa, conforme os seguintes requisitos:
1.  A empresa √© organizada em <strong>departamento</strong> (nome unico, numero unico).
2.  Um departamento √© gerenciado por um <strong>empregado</strong> (armazenar a data de inicio da gerencia).
3.  Um departamento pode ter v√°rias <strong>localizacoes</strong> (atributo multivalorado).
4.  Um departamento controla v√°rios <strong>projeto</strong> (nome unico, numero unico, localizacao unica).
5.  O BD armazena dados de <strong>empregado</strong> (nome, cpf, endereco, salario, genero, data_nascimento).
6.  Um empregado trabalha em um departamento e em v√°rios projetos (mantendo as horas por semana).
7.  Cada empregado tem um <strong>supervisor</strong> (que √© outro empregado) (relacionamento recursivo).
8.  Dependentes de empregados (nome, genero, data_nascimento, relacionamento com o empregado) devem ser modelados como <strong>entidade fraca</strong>.

## 2.7 EXERC√çCIOS INTEGRADOS (E.I.): Modelagem da Tabela Peri√≥dica (Qu√≠mica) e Estrutura Taxon√¥mica (Biologia).

Estes exerc√≠cios aplicam os conceitos de modelagem de dados a estruturas de disciplinas do n√∫cleo comum.

**E.I. 1: Modelagem da tabela periodica (quimica)**
Projete um ER para armazenar dados da tabela periodica:
1.  **Entidades:**
    *   <strong>elemento</strong>: armazena as propriedades b√°sicas (<u>simbolo</u>, nome, numero_atomico, massa_atomica).
    *   <strong>grupo</strong>: armazena informa√ß√µes sobre as fam√≠lias (<u>num_grupo</u>, nome_grupo).
    *   <strong>periodo</strong>: armazena o per√≠odo (<u>num_periodo</u>).
2.  **Relacionamentos e Cardinalidades:**
    *   <strong>pertence_a_grupo</strong> (elemento e grupo): 1 elemento pertence a 1 grupo, mas 1 grupo cont√©m N elementos (1:N).
    *   <strong>esta_no_periodo</strong> (elemento e periodo): 1 elemento est√° em 1 periodo, mas 1 periodo cont√©m N elementos (1:N).

**E.I. 2: Estrutura taxonomica (biologia)**
Modele a hierarquia biol√≥gica (reino, filo, classe, ordem, familia, genero, especie).
1.  **Entidades:** √â poss√≠vel modelar cada n√≠vel (reino, filo, classe, etc.) como uma entidade, ou utilizar uma abordagem de auto-relacionamento (recursiva) para representar a estrutura hier√°rquica.
2.  **Abordagem 1 (Entidades separadas):**
    *   Crie entidades para os n√≠veis: <strong>reino</strong>, <strong>filo</strong>, <strong>classe</strong>, <strong>ordem</strong>, <strong>familia</strong>, <strong>genero</strong>, <strong>especie</strong> (cada uma com atributos como <u>codigo</u>, nome).
    *   Defina relacionamentos 1:N em cadeia (ex.: <em>reino contem n filos</em>, <em>filo contem n classes</em>, etc.).
3.  **Abordagem 2 (Recursiva/Generaliza√ß√£o):**
    *   Crie uma entidade gen√©rica <strong>categoria</strong> (<u>id_categoria</u>, nome, nivel_taxonomico: {reino, filo, ...}).
    *   Use um <strong>auto_relacionamento</strong> (recursivo) para ligar uma categoria a sua "categoria pai" (ex.: uma ordem √© pai de N familias). Defina o papel de "pai" e "filho" na rela√ß√£o.