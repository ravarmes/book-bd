### CAP√çTULO 6 ‚Äì Otimiza√ß√£o, Modelo F√≠sico e Administra√ß√£o B√°sica

O projeto de um banco de dados (BD) √© conclu√≠do com a escolha do Sistema Gerenciador de Banco de Dados (SGBD) e a cria√ß√£o do **Modelo F√≠sico**. Essa fase envolve a **otimiza√ß√£o** do sistema, buscando garantir que as consultas e opera√ß√µes sejam executadas de forma eficiente, uma capacidade que todo bom SGBD deve possuir.

üñ•Ô∏è **Ferramenta:** pgAdmin (PostgreSQL)

## 6.1 Conceito de Modelo F√≠sico e Mapeamento para o SGBD.

O **Projeto F√≠sico** √© a etapa final do projeto de banco de dados, sendo o processo de refinamento do modelo l√≥gico.

1.  **N√≠vel de Abstra√ß√£o:** O Modelo F√≠sico √© o **n√≠vel mais baixo de abstra√ß√£o**. Ele descreve como os dados ser√£o armazenados fisicamente no computador.
2.  **Estrutura e Detalhamento:** Descreve a implementa√ß√£o do BD, englobando aspectos de *software* e *hardware*. Ele especifica o **tamanho de campos** e os **tipos dos campos**, al√©m da terminologia dos campos, que s√£o projetadas de acordo com os requisitos de processamento.
3.  **Depend√™ncia do SGBD:** Ao contr√°rio dos modelos conceitual e l√≥gico (que s√£o mais independentes do *software*), o projeto f√≠sico √© dependente do SGBD escolhido (como o PostgreSQL ou MySQL). O modelo f√≠sico especifica as estruturas de armazenamento, os **√≠ndices** e os caminhos de acesso ao BD.
4.  **Implementa√ß√£o:** A implementa√ß√£o do modelo f√≠sico √© realizada utilizando comandos da **Linguagem de Defini√ß√£o de Dados (DDL)**, como o `CREATE TABLE`.

## 6.2 √çndices: Cria√ß√£o, Tipos e Desempenho de Consultas.

Os √≠ndices s√£o cruciais para garantir o desempenho das consultas e a efici√™ncia do sistema.

**Fun√ß√£o e Natureza:**

O SGBD deve prover estruturas de dados especializadas e t√©cnicas de busca que aceleram a pesquisa no disco por registros de interesse. Os **√≠ndices** s√£o arquivos auxiliares (ou estruturas de dados especializadas) frequentemente utilizados para esse prop√≥sito. O projeto f√≠sico do BD deve especificar os **√≠ndices**.

**Tipos e Estrutura:**

*   Os √≠ndices s√£o tipicamente baseados em uma **estrutura de dados em √°rvore ou *hash***, modificadas para serem adequadas √† busca em disco.
*   As chaves prim√°rias (PKs) s√£o importantes porque permitem encontrar tuplas espec√≠ficas dentro de um conjunto de tuplas de forma **aleat√≥ria**, evitando a necessidade de buscar os registros de forma sequencial.

**Cria√ß√£o (DDL):**

A Linguagem de Defini√ß√£o de Dados (DDL) √© o subconjunto da SQL que inclui comandos para a cria√ß√£o de √≠ndices. O comando `CREATE INDEX` √© usado para criar √≠ndices em uma tabela.

## 6.3 Ajustes de Normaliza√ß√£o e Desnormaliza√ß√£o para Performance.

O projeto do banco de dados busca, idealmente, armazenar cada item l√≥gico de dado em apenas um lugar, o que √© alcan√ßado atrav√©s da **normaliza√ß√£o de dados**.

### Normaliza√ß√£o (Controle de Redund√¢ncia)

*   A normaliza√ß√£o √© um processo de an√°lise realizado sobre esquemas relacionais para minimizar a **redund√¢ncia de dados** e, consequentemente, reduzir anomalias (de inser√ß√£o, atualiza√ß√£o e exclus√£o).
*   A redund√¢ncia de dados ocorre quando a mesma informa√ß√£o √© armazenada m√∫ltiplas vezes no sistema.
*   A redund√¢ncia gera problemas como o desperd√≠cio de espa√ßo de armazenamento (cr√≠tico em grandes BDs) e inconsist√™ncia (se a informa√ß√£o n√£o for atualizada em todas as c√≥pias).

### Desnormaliza√ß√£o (Ajuste para Performance)

A **desnormaliza√ß√£o** √© um assunto controverso na literatura e n√£o √© uma t√©cnica un√¢nime. Ela envolve a introdu√ß√£o intencional de redund√¢ncia, combinando atributos n√£o relacionados ou mantendo-os em tipos de entidade mais simples.

A desnormaliza√ß√£o pode ser necess√°ria em casos espec√≠ficos:

1.  **Hist√≥rico de Dados:** Quando √© necess√°rio manter um hist√≥rico de dados armazenados, como documentos fiscais que, ap√≥s consolidados, n√£o podem ser alterados.
2.  **Consultas Complexas:** Para evitar a necessidade de consultas complexas que s√£o requeridas constantemente, como aquelas que exigem jun√ß√µes entre duas ou mais tabelas.
3.  **Ganho de Desempenho (Controverso):** Desnormalizar para obter ganho de desempenho √© o argumento mais controverso, pois √© dif√≠cil comprovar que o aumento de performance √© significativo.

## 6.4 Plano de Execu√ß√£o (Execution Plan) e Tuning B√°sico.

Embora os termos espec√≠ficos *Plano de Execu√ß√£o* e *Tuning* n√£o estejam detalhados nas fontes, o conceito de otimiza√ß√£o e efici√™ncia √© fundamental para o SGBD.

O SGBD deve prover a capacidade de executar consultas e atualiza√ß√µes de forma **eficiente**.

**Tuning B√°sico e Otimiza√ß√£o:**

1.  **Utiliza√ß√£o de √çndices:** O uso de arquivos auxiliares chamados **√≠ndices** √© a t√©cnica prim√°ria fornecida pelo SGBD para acelerar a busca no disco por registros de interesse.
2.  **Projeto Adequado:** Garantir que o BD esteja em um estado consistente (normalizado) √© a base para a efici√™ncia, pois um projeto mal elaborado pode apresentar anomalias (inclus√£o, altera√ß√£o, exclus√£o) que dificultam a manuten√ß√£o e a consulta.
3.  **Responsabilidade do DBA:** O Administrador do Banco de Dados (DBA) √© o profissional respons√°vel por monitorar e gerenciar todas as bases de dados criadas no SGBD. Uma das fun√ß√µes do DBA √© garantir que os dados estejam com **desempenho satisfat√≥rio**.

## 6.5 ESTUDO DE CASO: Otimizando Consultas Cr√≠ticas da Biblioteca. (Pr√°tica relacionada ao conte√∫do do cap√≠tulo no contexto do sistema da biblioteca.)

Em um BD de Biblioteca (que cont√©m dados sobre alunos, disciplinas/livros e solicita√ß√µes/empr√©stimos), consultas cr√≠ticas frequentemente envolvem buscas por nome de aluno, t√≠tulo de livro ou datas.

**Pr√°tica de Otimiza√ß√£o (Uso de √çndices):**

Se a tabela `LIVRO` contiver milh√µes de registros, uma consulta como `SELECT * FROM LIVRO WHERE Titulo = 'Titulo X'` ser√° lenta se o atributo `Titulo` n√£o for indexado.

**A√ß√£o:** Cria√ß√£o de um √≠ndice no atributo `Titulo` (e possivelmente no `Nome` do aluno na tabela `ALUNO`) para acelerar as opera√ß√µes de busca que utilizam esses campos na cl√°usula `WHERE`.

**Comando DDL (Conceitual para PostgreSQL/pgAdmin):**

```sql
-- DDL: Cria√ß√£o de √çndice no campo Titulo da tabela LIVRO
CREATE INDEX idx_titulo_livro ON LIVRO (Titulo);

-- DDL: Cria√ß√£o de √çndice no campo Nome da tabela ALUNO
CREATE INDEX idx_nome_aluno ON ALUNO (Nome);
```

## 6.6 EXERC√çCIOS COMPLEMENTARES: Cria√ß√£o de √≠ndices em tabelas de grande volume (Ex: Log de Acessos).

Em um dom√≠nio de grande volume de dados, como um *Log de Acessos* (`TB_LOG_ACESSO`), onde cada registro cont√©m `ID_Sessao`, `Data_Hora_Acesso` e `IP_Usuario`.

**Objetivo:** Otimizar consultas que buscam rapidamente todos os acessos realizados em uma data espec√≠fica.

1.  **Cria√ß√£o de Tabela (DDL):** (Assumindo a tabela `TB_LOG_ACESSO` j√° existe).
2.  **Identifica√ß√£o do Ponto Cr√≠tico:** O ponto cr√≠tico √© o filtro por `Data_Hora_Acesso`.
3.  **Cria√ß√£o de √çndice (DDL):** Crie um √≠ndice no campo `Data_Hora_Acesso` para permitir que o SGBD localize rapidamente os registros, acelerando o processo de busca no disco.

**Comando DDL (Conceitual para PostgreSQL/pgAdmin):**

```sql
-- Cria√ß√£o de √çndice para acelerar consultas baseadas em tempo/data
CREATE INDEX idx_data_hora_acesso ON TB_LOG_ACESSO (Data_Hora_Acesso);
```

## 6.7 EXERC√çCIOS INTEGRADOS: Otimizando Consultas em Dados Cient√≠ficos (Qu√≠mica/Biologia).

Em um dom√≠nio de dados cient√≠ficos (ex: Biologia/Qu√≠mica), um banco de dados pode armazenar `TB_AMOSTRA` e `TB_RESULTADO_ANALISE`. O desempenho √© cr√≠tico ao correlacionar resultados de an√°lise com as amostras.

**Cen√°rio:** A tabela `TB_RESULTADO_ANALISE` possui chaves prim√°rias compostas por `(ID_Amostra, ID_Teste)` e um atributo `Valor_Medido`.

**Desafio de Otimiza√ß√£o (Desnormaliza√ß√£o vs. Normaliza√ß√£o):**

Suponha que 99% das consultas exigem a `Descricao_Amostra` da tabela `TB_AMOSTRA` junto com o `Valor_Medido` da `TB_RESULTADO_ANALISE`.

**Pergunta:** Qual seria um ajuste de desempenho controverso, por√©m pr√°tico, que poderia ser feito (desconsiderando a 3FN para esta an√°lise de performance)?

**Resposta:** A desnormaliza√ß√£o. Para evitar a constante necessidade de `JOIN` (jun√ß√£o) entre `TB_AMOSTRA` e `TB_RESULTADO_ANALISE`, o atributo `Descricao_Amostra` poderia ser redundantemente copiado para a tabela `TB_RESULTADO_ANALISE`. Isso aceleraria as consultas frequentes que envolvem apenas essas duas colunas, embora aumente a redund√¢ncia e a complexidade de atualiza√ß√£o dos dados.

*Nota: Este √© um exemplo de trade-off de desempenho em que a desnormaliza√ß√£o √© aplicada apesar das desvantagens de integridade, conforme discutido na se√ß√£o 6.3.*
