### CAP√çTULO 3 ‚Äì Modelo L√≥gico Relacional: A Estrutura Formal do Banco

O Modelo L√≥gico √© o n√≠vel de abstra√ß√£o que descreve quais dados est√£o armazenados no computador e como eles se relacionam, representando a realidade do problema com uma vis√£o geral dos principais dados e relacionamentos. Ele deve ser uma vis√£o abstrata apropriada para a equipe de desenvolvimento. Um modelo l√≥gico eficiente precisa estar normalizado e ter as chaves estrangeiras criadas corretamente. O modelo l√≥gico mais utilizado √© o **Modelo Relacional**, que classifica os dados em tabelas compostas por colunas e linhas que possuem relacionamentos.

üß© **Ferramenta:** brModelo (Web)

Embora o brModelo n√£o seja detalhado nas fontes, ferramentas CASE (Computer Aided Software Engineering) como o **ERDPlus** e o **MySQL Workbench** s√£o mencionadas como manipuladoras de modelos ER capazes de gerar automaticamente um BD relacional.

## 3.1 Transforma√ß√£o do Modelo Conceitual em Relacional.

A modelagem l√≥gica consiste na transforma√ß√£o do Modelo Conceitual (geralmente Modelo Entidade-Relacionamento ‚Äì MER) em um modelo l√≥gico, que no nosso contexto √© o modelo relacional. O Modelo Relacional representa os dados em uma cole√ß√£o de tabelas, onde as linhas s√£o chamadas de *tuplas* ou *registros* e as colunas s√£o *atributos* ou *campos*.

A convers√£o do Modelo ER para o Modelo Relacional √© crucial.

## 3.4 Regras de Mapeamento e Conven√ß√µes.

A transforma√ß√£o do Modelo Entidade-Relacionamento para o Modelo Relacional segue um algoritmo que define as regras para a cria√ß√£o das tabelas (rela√ß√µes), colunas (atributos) e chaves.

As principais regras de mapeamento (Algoritmo de Mapeamento ER-Relacional) s√£o:

1.  **Mapeamento de Tipos de Entidade Regulares:** Para cada tipo de entidade forte $E$ no modelo ER, cria-se uma rela√ß√£o $R$. Esta rela√ß√£o $R$ inclui todos os atributos de $E$. Atributos compostos devem ter um atributo criado para cada um de seus componentes. Um dos atributos chave da entidade √© escolhido para ser a **chave prim√°ria (PK)** de $R$.
2.  **Mapeamento de Tipos de Entidades Fracas:** Para cada entidade fraca $W$ com entidade propriet√°ria $E$, cria-se uma rela√ß√£o $R$. $R$ deve incluir todos os atributos de $W$, al√©m da **chave prim√°ria** da entidade propriet√°ria $E$ como uma **chave estrangeira (FK)** em $R$. A chave prim√°ria de $R$ ser√° a combina√ß√£o da chave estrangeira da entidade propriet√°ria e sua chave parcial.
3.  **Mapeamento de Tipos de Relacionamentos Bin√°rios 1:1:** Escolhe-se uma das entidades ($E1$) e inclui-se a chave prim√°ria da outra entidade ($E2$) como chave estrangeira em $E1$. √â recomendado escolher para $E1$ a entidade com **participa√ß√£o total** no relacionamento. Quaisquer atributos do relacionamento s√£o inclu√≠dos em $E1$.
4.  **Mapeamento de Tipos de Relacionamentos Bin√°rios 1:N (ou N:1):** A chave prim√°ria da rela√ß√£o do lado "1" √© inclu√≠da como **chave estrangeira** na rela√ß√£o do lado "**N**". Quaisquer atributos do relacionamento tamb√©m s√£o inclu√≠dos na rela√ß√£o do lado "N".
5.  **Mapeamento de Tipos de Relacionamentos Bin√°rios M:N (Muitos para Muitos):** Cria-se uma **nova rela√ß√£o** para representar o relacionamento. As chaves prim√°rias de ambas as entidades participantes ($R1$ e $R2$) s√£o inclu√≠das como chaves estrangeiras na nova rela√ß√£o. A chave prim√°ria da nova rela√ß√£o ser√° composta pela combina√ß√£o das chaves estrangeiras de $R1$ e $R2$. Atributos do relacionamento, se houver, tamb√©m s√£o inclu√≠dos nessa nova rela√ß√£o.
6.  **Mapeamento de Atributos Multi-Valorados:** Cria-se uma **nova rela√ß√£o** $R$ para o atributo multi-valorado $A$. Esta rela√ß√£o conter√° um atributo relacionado a $A$ e a chave prim√°ria da entidade √† qual pertence, como chave estrangeira. A chave prim√°ria de $R$ pode ser a combina√ß√£o desses atributos.
7.  **Mapeamento de Tipos de Relacionamentos N-√°rios (N > 2):** Cria-se uma rela√ß√£o $R$ para represent√°-lo. A chave prim√°ria de cada entidade participante √© inclu√≠da como chave estrangeira em $R$. A chave prim√°ria de $R$ √© a combina√ß√£o das chaves estrangeiras dos tipos de entidade participantes.

## 3.2 Chaves Prim√°rias, Estrangeiras e Integridade Referencial.

No Modelo Relacional, as chaves s√£o fundamentais para a identifica√ß√£o √∫nica dos registros e para estabelecer conex√µes.

**Chaves Prim√°rias (Primary Keys ‚Äì PK)**
Um atributo chave (ou identificador de entidade) √© um conjunto de um ou mais atributos cujos valores servem para distinguir unicamente uma ocorr√™ncia de uma entidade das demais ocorr√™ncias da mesma entidade. Toda entidade deve possuir um identificador. Ao criar uma tabela, a chave prim√°ria √© especificada com a declara√ß√£o `PRIMARY KEY`. A chave prim√°ria √© projetada para n√£o permitir ocorr√™ncias m√∫ltiplas e nem valores nulos (restri√ß√£o `NOT NULL` √© obrigat√≥ria para chaves prim√°rias).

**Chaves Estrangeiras (Foreign Keys ‚Äì FK)**
Uma chave estrangeira √© uma ou mais colunas de uma tabela cujos valores devem estar fundamentalmente presentes como chave prim√°ria de outra tabela. A chave estrangeira √© o mecanismo que permite a **implanta√ß√£o de relacionamentos** em um banco de dados relacional.

No SQL, a chave estrangeira √© definida usando a declara√ß√£o `FOREIGN KEY` e indicando, via `REFERENCES`, a tabela e o atributo ao qual ela se refere. O valor da chave estrangeira deve ser um valor que j√° tenha sido cadastrado na chave prim√°ria da tabela correspondente, ou um valor nulo.

**Integridade Referencial**
A chave estrangeira garante a **integridade referencial** do modelo relacional. Esta √© uma restri√ß√£o de integridade mais complexa, especificando que um registro em um arquivo deve estar relacionado a registros em outros arquivos. A integridade referencial garante que o valor associado a um campo que seja uma chave estrangeira esteja cadastrado na tabela de refer√™ncia, evitando inconsist√™ncias.

Ao definir uma chave estrangeira, podem ser especificadas a√ß√µes para exclus√£o (`ON DELETE`) ou atualiza√ß√£o (`ON UPDATE`) do registro referenciado na tabela de origem (pai), afetando os registros na tabela que cont√©m a chave estrangeira (filha):
*   **CASCADE:** Realiza a exclus√£o ou atualiza√ß√£o em todas as tabelas filhas que possuam o valor da chave que ser√° exclu√≠da/atualizada na tabela pai.
*   **RESTRICT:** N√£o permite a exclus√£o na tabela pai de um registro cuja chave prim√°ria exista em alguma tabela filha (op√ß√£o padr√£o/default).
*   **SET NULL:** Atribui o valor NULO nas colunas das tabelas filha que contenham o valor da chave que ser√° exclu√≠da na tabela pai.

## 3.3 Normaliza√ß√£o Detalhada: Primeira, Segunda e Terceira Formas Normais (1FN, 2FN, 3FN).

A normaliza√ß√£o √© o processo de an√°lise realizado sobre esquemas relacionais para conseguir caracter√≠sticas desej√°veis, como a minimiza√ß√£o de redund√¢ncia de dados e a consequente redu√ß√£o de anomalias de inser√ß√£o, atualiza√ß√£o e exclus√£o. O processo segue uma cadeia de avalia√ß√£o top-down, verificando se cada rela√ß√£o satisfaz as formas normais.

**Primeira Forma Normal (1FN)**
Uma tabela est√° na **1FN** se e somente se n√£o possuir **atributo multivalorado** ou **atributo composto**. Este procedimento elimina tabelas aninhadas. Ou seja, todos os atributos devem conter apenas dados at√¥micos (cada atributo deve ter apenas um valor por registro).
*   **Exemplo:** Se um atributo `Telefone` √© multivalorado, deve-se criar uma nova tabela para conter o atributo multivalorado, relacionando-a √† tabela original via chave estrangeira. Atributos compostos s√£o resolvidos inserindo os atributos at√¥micos base diretamente na tabela, eliminando o atributo composto.

**Segunda Forma Normal (2FN)**
Uma tabela est√° na **2FN** se estiver na 1FN e **n√£o possuir depend√™ncia funcional parcial**. A 2FN s√≥ √© aplic√°vel a tabelas que possuem uma **chave prim√°ria composta** e outros atributos que n√£o fa√ßam parte da chave prim√°ria.
*   A **depend√™ncia parcial** ocorre quando um ou mais atributos n√£o chave n√£o dependem de **toda** a chave prim√°ria composta.
*   Se houver depend√™ncia parcial, a solu√ß√£o √© criar novas tabelas para armazenar os dados dos campos redundantes, onde seus valores apresentam repeti√ß√£o, e remover esses campos da tabela original. Em seguida, criam-se chaves prim√°rias nas novas tabelas (baseadas na parte da chave composta de que dependiam) e rela√ß√µes 1:N com a tabela original.

**Terceira Forma Normal (3FN)**
Uma tabela est√° na **3FN** se estiver na 2FN e **n√£o possuir nenhuma depend√™ncia funcional transitiva**.
*   A **depend√™ncia transitiva** ocorre quando um atributo n√£o chave depende de outro atributo n√£o chave.
*   **Exemplo:** Se em uma tabela `Departamento` (chave `Cod_departamento`), o atributo `Nome_gerente` depende do atributo `Cod_gerente`, e `Cod_gerente` n√£o √© a chave prim√°ria, ocorre uma depend√™ncia transitiva.
*   A solu√ß√£o √© semelhante √† da 2FN: cria-se uma nova tabela (ex: `tbGerente`) para isolar a depend√™ncia funcional, contendo o atributo dependente e o atributo do qual ele depende (`Cod_gerente` e `Nome_gerente`), e a tabela original mant√©m uma chave estrangeira para essa nova tabela.

Atingir a 3FN √© geralmente satisfat√≥rio para a maioria dos projetos.

## 3.5 Exportando o C√≥digo DDL SQL no brModelo.

Ap√≥s a modelagem l√≥gica relacional e a normaliza√ß√£o, a pr√≥xima etapa √© a implementa√ß√£o do modelo l√≥gico no SGBD. Isso envolve a utiliza√ß√£o da **Linguagem de Defini√ß√£o de Dados (DDL)** da SQL.

Ferramentas CASE, como o MySQL Workbench, auxiliam nesse processo, gerando automaticamente os comandos SQL a partir do modelo visual.

O comando principal da DDL para criar a estrutura do banco de dados relacional √© o `CREATE TABLE`.

A sintaxe b√°sica para cria√ß√£o de uma tabela inclui a especifica√ß√£o de:

1.  **Nome da Tabela** (`<nome-tabela>`).
2.  **Defini√ß√£o dos Atributos** (`<nome-coluna> <tipo-dado>`). Tipos de dados comuns incluem `INT`, `VARCHAR(N)`, `DATE`, `DECIMAL`.
3.  **Restri√ß√£o NOT NULL** (para campos obrigat√≥rios, especialmente a chave prim√°ria).
4.  **Chave Prim√°ria** (`PRIMARY KEY (<nome-coluna-chave>)`).
5.  **Chave Estrangeira** (se houver, definindo a integridade referencial):
    `FOREIGN KEY (<nome-coluna-chave-estrangeira>) REFERENCES <nome-tabela-origem> ON DELETE [RESTRICT | CASCADE | SET NULL]`.

Ao utilizar uma ferramenta visual (como o conceito do brModelo ou MySQL Workbench), o comando DDL √© gerado, permitindo a exporta√ß√£o do *script* SQL que pode ser executado diretamente no SGBD.

## 3.6 ESTUDO DE CASO (E.C.): Modelo L√≥gico da Biblioteca. (Pr√°tica relacionada ao conte√∫do do cap√≠tulo no contexto do sistema da biblioteca.)

Considerando o contexto de um sistema de biblioteca, que armazena informa√ß√µes sobre livros, nomes de alunos e solicita√ß√µes, e o objetivo de desenvolver um sistema para gerenciar loca√ß√£o e devolu√ß√£o de filmes (similar a um sistema de empr√©stimo), o mapeamento para o Modelo L√≥gico Relacional (exemplo baseado nas regras 3.4) pode incluir:

| Entidade ER (Conceitual) | Atributos Chave / Relacionamento | Mapeamento (Modelo L√≥gico Relacional) | Chaves | Regra Aplicada |
| :--- | :--- | :--- | :--- | :--- |
| **LIVRO** (Entidade Regular) | C√≥digo (PK), T√≠tulo, Autor | Tabela `LIVRO` | `Codigo` (PK) | Regra 1 |
| **ALUNO** (Entidade Regular) | Matr√≠cula (PK), Nome, Endere√ßo | Tabela `ALUNO` | `Matricula` (PK) | Regra 1 |
| **EMPR√âSTIMO** (Rela√ß√£o N:M entre ALUNO e LIVRO) | Data Empr√©stimo, Data Devolu√ß√£o | Tabela `EMPRESTIMO` | `Matricula_Aluno` (FK, PK parcial), `Codigo_Livro` (FK, PK parcial) | Regra 5 |
| **TELEFONES** (Atributo Multi-valorado de ALUNO) | Telefone | Tabela `TELEFONE_ALUNO` | `Matricula_Aluno` (FK, PK parcial), `Telefone` (PK parcial) | Regra 6 |

**Conven√ß√µes (Exemplo de Estrutura SQL DDL):**

```sql
-- Cria√ß√£o de Tabela de Entidade Regular
CREATE TABLE ALUNO (
    Matricula INT NOT NULL,
    Nome VARCHAR(100) NOT NULL,
    Endereco VARCHAR(100),
    PRIMARY KEY (Matricula)
);

-- Cria√ß√£o de Tabela de Mapeamento M:N (EMPR√âSTIMO)
CREATE TABLE EMPRESTIMO (
    Matricula_Aluno INT NOT NULL,
    Codigo_Livro INT NOT NULL,
    Data_Emprestimo DATE NOT NULL,
    Data_Devolucao DATE,
    PRIMARY KEY (Matricula_Aluno, Codigo_Livro),
    FOREIGN KEY (Matricula_Aluno) REFERENCES ALUNO(Matricula) ON DELETE CASCADE,
    FOREIGN KEY (Codigo_Livro) REFERENCES LIVRO(Codigo) ON DELETE RESTRICT
);
```

## 3.7 EXERC√çCIOS COMPLEMENTARES (E.C.): Normaliza√ß√£o de tabelas em dom√≠nios de varejo (Ex: Supermercado). (Exerc√≠cios para fixa√ß√£o de conceitos e exerc√≠cios pr√°ticos do cap√≠tulo sobre outros dom√≠nios de problemas.)

O dom√≠nio de varejo (Supermercado/Loja) √© um cen√°rio comum para exemplificar problemas de modelagem e anomalias.

**Objetivo:** Fixar os conceitos de 1FN, 2FN e 3FN.

**Cen√°rio de Varejo (Exemplo Adaptado de Normaliza√ß√£o):**

Considere a tabela inicial de vendas de um supermercado que n√£o foi normalizada:

| Cliente\_ID | Nome\_Cliente | Endere√ßo | Telefone(s) | C√≥digo\_Gerente | Nome\_Gerente | Item\_ID | Quantidade |
| :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |
| 1 | Jo√£o Silva | Rua A, Bairro X | 9999-1111, 8888-2222 | 10 | Maria Lima | 50 | 2 |

#### **Passo 1: Adequa√ß√£o √† Primeira Forma Normal (1FN)**

**Problema:**
1. O atributo `Endere√ßo` √© composto (Rua, Bairro).
2. O atributo `Telefone(s)` √© multivalorado.

**A√ß√µes (Regras 1FN):**
1. **Atributo Composto:** Decompor `Endere√ßo` em atributos at√¥micos (`Rua`, `Bairro`).
2. **Atributo Multivalorado:** Criar uma nova tabela, `TELEFONES`, com a chave prim√°ria da tabela original (`Cliente_ID`) como FK, e o atributo `Telefone`.

#### **Passo 2: Adequa√ß√£o √† Segunda Forma Normal (2FN)**

*Assumindo uma chave prim√°ria composta: (Cliente\_ID, Item\_ID)*

**Problema (Se fosse aplic√°vel):** Se houvesse depend√™ncia funcional parcial (por exemplo, `Nome_Cliente` depende apenas de `Cliente_ID`, e n√£o de `Item_ID`).

**A√ß√µes (Regras 2FN):**
1. Criar uma nova tabela (`CLIENTE`) contendo os atributos que dependem apenas de `Cliente_ID` (`Nome_Cliente`, `Rua`, `Bairro`).
2. A tabela original (`VENDA_ITEM`) manteria apenas os atributos dependentes da chave composta (`Quantidade`) e as chaves estrangeiras (`Cliente_ID`, `Item_ID`).

#### **Passo 3: Adequa√ß√£o √† Terceira Forma Normal (3FN)**

*Considerando a tabela Cliente (ap√≥s 2FN) ou a tabela original (ap√≥s 1FN) se a 2FN n√£o fosse aplic√°vel.*

**Problema:** Existe depend√™ncia funcional transitiva entre atributos n√£o chave: `Nome_Gerente` depende funcionalmente de `C√≥digo_Gerente`, e `C√≥digo_Gerente` n√£o √© chave prim√°ria.

**A√ß√µes (Regras 3FN):**
1. Criar uma nova tabela (`GERENTE`) contendo a chave n√£o prim√°ria que determina a depend√™ncia (`C√≥digo_Gerente`) e o atributo determinado (`Nome_Gerente`).
2. O atributo `C√≥digo_Gerente` se torna a chave prim√°ria da nova tabela `GERENTE`.
3. A tabela original (`CLIENTE`) mant√©m `C√≥digo_Gerente` como chave estrangeira, removendo o atributo `Nome_Gerente`.

## 3.8 EXERC√çCIOS INTEGRADOS (E.I.): Mapeamento de Frequ√™ncia de Pr√°ticas Corporais (Educa√ß√£o F√≠sica). (Exerc√≠cios que relacionam o conte√∫do do cap√≠tulo com disciplinas do n√∫cleo comum.)

Para um exerc√≠cio integrado envolvendo Educa√ß√£o F√≠sica e Mapeamento Relacional, considere um sistema que registra a frequ√™ncia e o tipo de pr√°ticas corporais realizadas por Alunos ao longo do tempo.

**Objetivo:** Aplicar as regras de mapeamento ER-Relacional (Se√ß√£o 3.4) no dom√≠nio da Educa√ß√£o F√≠sica.

**Modelo Conceitual Simplificado:**

*   **Entidades:** `ALUNO`, `PR√ÅTICA_CORPORAL` (Ex: Nata√ß√£o, Futebol).
*   **Relacionamento:** `REGISTRA` (Associa√ß√£o entre ALUNO e PR√ÅTICA\_CORPORAL), com atributos descritivos `Data`, `Dura√ß√£o`.
*   **Cardinalidade:** Um `ALUNO` pode `REGISTRAR` muitas `PR√ÅTICAS_CORPORAIS`, e uma `PR√ÅTICA_CORPORAL` pode ser registrada por muitos `ALUNOS`. (N:M).
*   **Atributo Chave:** `ALUNO` (`Matricula`), `PR√ÅTICA_CORPORAL` (`ID_Pratica`).

**Mapeamento para o Modelo L√≥gico Relacional:**

| Entidade ER | Mapeamento MR (Tabela) | Chaves e Atributos | Regra Aplicada |
| :--- | :--- | :--- | :--- |
| **ALUNO** (Regular) | `TB_ALUNO` | `Matricula` (PK), Nome, DataNasc. | Regra 1 |
| **PR√ÅTICA\_CORPORAL** (Regular) | `TB_PRATICA` | `ID_Pratica` (PK), Descricao, Tipo. | Regra 1 |
| **REGISTRA** (N:M) | `TB_REGISTRO_PRATICA` | `Matricula_Aluno` (FK, PK parcial), `ID_Pratica` (FK, PK parcial), `Data`, `Dura√ß√£o`. | Regra 5 |

O relacionamento N:M (`REGISTRA`) √© mapeado para uma nova tabela (`TB_REGISTRO_PRATICA`), onde as chaves prim√°rias das entidades `ALUNO` e `PR√ÅTICA_CORPORAL` s√£o combinadas para formar a chave prim√°ria da nova tabela e manter a integridade referencial, conforme a regra 5 do mapeamento M:N.