### CAP√çTULO 4 ‚Äì Linguagem SQL: Defini√ß√£o, Manipula√ß√£o e Seguran√ßa de Dados

A Structured Query Language (SQL) √© a linguagem padr√£o para manipular bancos de dados relacionais. Ela foi desenvolvida pela IBM nos anos 70 e adotada por v√°rios desenvolvedores de SGBDs. A SQL √© uma linguagem declarativa, o que a diferencia de linguagens procedurais, sendo um padr√£o internacional utilizado quase universalmente com SGBDs relacionais para consultas e manipula√ß√£o de dados.

üñ•Ô∏è **Ferramenta:** pgAdmin (PostgreSQL)

O **PostgreSQL** √© um SGBD Relacional (SGBDR) que se originou do POSTGRES, desenvolvido na Universidade da Calif√≥rnia, Berkely, e √© considerado um dos mais avan√ßados bancos de dados de c√≥digo aberto dispon√≠veis. O **pgAdmin** √© o *front-end* (interface gr√°fica) frequentemente usado pelo PostgreSQL para coletar dados de entrada, pr√©-process√°-los e apresentar resultados ao usu√°rio de forma intelig√≠vel, auxiliando na manipula√ß√£o do banco de dados.

## 4.1 Introdu√ß√£o √† Linguagem SQL e ao SGBD PostgreSQL.

A Linguagem SQL √© dividida em subconjuntos de comandos, de acordo com as opera√ß√µes que se deseja efetuar sobre o banco de dados:

*   **DDL (Data Definition Language)**: Usado para criar, alterar e excluir a **estrutura** (esquemas, tabelas, √≠ndices).
*   **DML (Data Manipulation Language)**: Usado para inserir, atualizar e apagar **dados**.
*   **DQL (Data Query Language)**: Cont√©m o comando `SELECT`, usado para recuperar (consultar) dados. (Muitas vezes visto como parte do DML).
*   **DCL (Data Control Language)**: Controla o acesso dos usu√°rios aos dados, gerenciando seguran√ßa e autoriza√ß√£o.
*   **DTL (Data Transaction Language)**: Usado para iniciar e finalizar transa√ß√µes.

Embora a SQL seja padronizada (ISO/IEC 9075), cada SGBDR (como o PostgreSQL ou MySQL) apresenta seu pr√≥prio **dialeto**, com extens√µes e varia√ß√µes.

## 4.2 Comandos DDL: Cria√ß√£o e Estrutura de Tabelas e √çndices.

A DDL √© o conjunto de comandos que permite a cria√ß√£o, altera√ß√£o e remo√ß√£o da estrutura das tabelas e √≠ndices de um sistema. O resultado do uso da DDL √© o **dicion√°rio ou diret√≥rio de dados** (metadados), que armazena a defini√ß√£o completa da estrutura e restri√ß√µes do banco de dados.

### Comando CREATE TABLE

Usado para criar uma nova rela√ß√£o (tabela). A sintaxe exige o nome da tabela e, entre par√™nteses, os atributos (colunas) com seus tipos de dados e restri√ß√µes:

| Tipo de Dado Comum | Descri√ß√£o |
| :--- | :--- |
| `INT` (Integer) | Armazena n√∫meros inteiros. |
| `VARCHAR(N)` | Sequ√™ncia de tamanho vari√°vel com at√© N caracteres. |
| `CHAR(N)` | Caractere de tamanho fixo. |
| `DATE` | Armazena data. |
| `DECIMAL(P, E)` / `NUMERIC` | N√∫meros de ponto flutuante, usados para valores que precisam de exatid√£o (como dados monet√°rios). |

**Restri√ß√µes Importantes:**

*   **`NOT NULL`**: Indica que o atributo deve ter um conte√∫do e n√£o pode ser nulo. √â obrigat√≥rio para chaves prim√°rias.
*   **`PRIMARY KEY`**: Define a chave prim√°ria da tabela, garantindo a unicidade e identifica√ß√£o exclusiva do registro.
*   **`FOREIGN KEY... REFERENCES`**: Define a chave estrangeira (FK), que referencia a chave prim√°ria de outra tabela. As chaves estrangeiras s√£o cruciais para implementar relacionamentos e impor a **integridade referencial**.
    *   Podem incluir regras de integridade referencial como `ON DELETE [RESTRICT | CASCADE | SET NULL]`.

### Comando ALTER TABLE

Usado para fazer altera√ß√µes na estrutura de tabelas j√° existentes.

*   **Adicionar Coluna**: `ALTER TABLE <Tabela> ADD <Atributo> <Tipo_Dado>`.
*   **Modificar Coluna**: `ALTER TABLE <Tabela> MODIFY <Atributo> <Tipo_Dado>` (ou `ALTER... TYPE` no PostgreSQL).
*   **Excluir Coluna**: `ALTER TABLE <Tabela> DROP <Atributo>`.
*   **Adicionar Chave Estrangeira**: Permite criar o relacionamento ap√≥s a tabela ter sido criada, usando `FOREIGN KEY` e `REFERENCES`.

### Comando DROP TABLE

Usado para excluir a estrutura da tabela do banco de dados (tabela e todos os seus registros).

### √çndices

Embora n√£o detalhados na sintaxe expl√≠cita, a cria√ß√£o de **√≠ndices** √© uma capacidade do DDL. √çndices s√£o arquivos auxiliares, frequentemente baseados em estruturas de dados em √°rvore ou *hash*, que aceleram a busca e execu√ß√£o de consultas no disco, melhorando a efici√™ncia.

## 4.3 Comandos DML: Inclus√£o, Exclus√£o e Altera√ß√£o de Dados.

O DML (Linguagem de Manipula√ß√£o de Dados) √© o subconjunto de comandos usado para inserir, atualizar e apagar dados.

### Comando INSERT

Adiciona um novo registro (tupla) em uma tabela.

A sintaxe pode ser **expl√≠cita** (listando as colunas) ou **impl√≠cita** (assumindo a ordem das colunas, repassando valores para todas elas).

*Exemplo (expl√≠cito):*
`INSERT INTO ALUNO (Matricula, Nome, DataNascimento) VALUES ('2018005', 'Mariana Gomes', '2001-02-28');`

Valores de atributos que armazenam caracteres e datas devem ser colocados entre aspas simples (' ').

### Comando UPDATE

Altera os dados de um ou mais registros em uma tabela.

O `UPDATE` utiliza a cl√°usula `SET` para definir quais atributos ser√£o modificados e qual novo valor ser√° atribu√≠do, e a cl√°usula **`WHERE`** para filtrar quais registros sofrer√£o a altera√ß√£o.

*Exemplo:*
`UPDATE PROFESSOR SET Salario = Salario * 1.05 WHERE DCodigo='3';` (Aumenta o sal√°rio dos professores do departamento 3 em 5%).

### Comando DELETE

Remove um ou mais registros (linhas/tuplas) de uma tabela.

O `DELETE` utiliza a cl√°usula **`WHERE`** para selecionar as tuplas a serem removidas. Se a cl√°usula `WHERE` for omitida, **todos** os registros da tabela ser√£o exclu√≠dos.

*Exemplo:*
`DELETE FROM ALUNO WHERE Nome='Caio Nunes';`

A remo√ß√£o de registros em tabelas que possuem chave estrangeira em outras tabelas deve seguir as regras de **integridade referencial** (como `ON DELETE CASCADE`), garantindo que os registros dependentes sejam tratados corretamente.

## 4.4 Gerenciamento de Transa√ß√µes: COMMIT, ROLLBACK e SAVEPOINT.

Uma transa√ß√£o consiste em um conjunto de opera√ß√µes de banco de dados que s√£o tratadas como uma unidade l√≥gica indivis√≠vel. O subconjunto DTL (Data Transaction Language) define comandos para iniciar e finalizar transa√ß√µes.

As transa√ß√µes realizadas pelo SGBD devem seguir as propriedades **ACID** (Atomicidade, Consist√™ncia, Isolamento e Durabilidade):

*   **Atomicidade**: Garante que todas as opera√ß√µes de uma transa√ß√£o sejam executadas, ou nenhuma delas. √â o princ√≠pio do "tudo ou nada".
*   **Consist√™ncia**: Garante que a execu√ß√£o da transa√ß√£o leve o banco de dados de um estado consistente a outro estado consistente.
*   **Isolamento**: Garante que uma transa√ß√£o n√£o seja interferida por nenhuma outra transa√ß√£o concorrente.
*   **Durabilidade**: Garante que o que foi salvo n√£o ser√° perdido, mesmo ap√≥s falhas de software ou hardware.

### Comando COMMIT

Ap√≥s executar comandos DML (`INSERT`, `UPDATE`, `DELETE`), os dados ficam na mem√≥ria *cache* da transa√ß√£o. O comando `COMMIT` √© utilizado para persistir os dados permanentemente no banco de dados.

*Sintaxe:*
`COMMIT;`

### Comando ROLLBACK

O comando `ROLLBACK` √© usado para descartar os dados que est√£o na mem√≥ria *cache* da transa√ß√£o, retornando o banco de dados ao estado consistente anterior √† transa√ß√£o.

*Sintaxe:*
`ROLLBACK;`

### SAVEPOINT

Embora o `SAVEPOINT` n√£o seja detalhado nos comandos dos fontes, ele √© um conceito relacionado que permite que uma transa√ß√£o seja revertida para um ponto intermedi√°rio definido, em vez de reverter toda a transa√ß√£o.

## 4.5 Consultas Simples (DQL) e Ordena√ß√µes.

A recupera√ß√£o dos dados armazenados √© efetuada atrav√©s do comando `SELECT` (DQL).

### Estrutura B√°sica do SELECT

A forma b√°sica da declara√ß√£o `SELECT` √© composta pelas cl√°usulas `SELECT`, `FROM` e, opcionalmente, `WHERE`:

`SELECT < lista de atributos > FROM < lista de tabelas > WHERE < condicoes > ;`

*   **`SELECT <lista de atributos>`**: Seleciona as colunas desejadas. Usar `SELECT *` seleciona todos os atributos das tuplas selecionadas.
*   **`FROM <lista de tabelas>`**: Especifica a(s) tabela(s) que cont√©m os dados.
*   **`WHERE <condicoes>`**: Restringe a sele√ß√£o das tuplas (registros).

### Cl√°usula WHERE e Operadores

A cl√°usula `WHERE` utiliza operadores l√≥gicos e comparativos para filtrar os registros:

| Operador | Significado | Exemplo | Fonte |
| :--- | :--- | :--- | :--- |
| **`=`** | Igual | `WHERE Nome = 'Tadeu'` | |
| **`<>`** ou `!=` | Diferente | `WHERE Nome <> 'Tadeu'` | |
| **`>`**, `<` | Maior que, Menor que | `WHERE Salario > 1000` | |
| **`BETWEEN A AND B`** | Seleciona valores entre A e B (inclusivo) | `WHERE Idade BETWEEN 10 AND 20` | |
| **`LIKE`** | Correspond√™ncia de padr√£o de *string* (`%` substitui zero ou mais caracteres; `_` substitui um √∫nico caractere) | `WHERE Endereco LIKE '%Ipatinga%'` | |
| **`IS NULL`** / `IS NOT NULL` | Verifica se o valor √© nulo ou n√£o nulo | `WHERE ID_Setor IS NULL` | |
| **`AND`** / **`OR`** | Operadores l√≥gicos para combinar condi√ß√µes | `WHERE ID_Setor IS NOT NULL AND ID = 1` | |

### Cl√°usula ORDER BY

Permite ordenar as tuplas resultantes de uma consulta pelos valores de um ou mais atributos.

*   **`ASC` (Ascendente)**: Ordem padr√£o, do menor para o maior (pode ser omitido).
*   **`DESC` (Descendente)**: Ordem decrescente, do maior para o menor.

*Exemplo:*
`SELECT Nome FROM PROFESSOR ORDER BY Nome DESC;`

## 4.6 Comandos DCL: Usu√°rios, Pap√©is e Controle de Acesso (Permiss√µes).

A Linguagem de Controle de Dados (DCL) √© o subconjunto de comandos que controla o acesso dos usu√°rios aos dados.

**Seguran√ßa e Acesso N√£o-Autorizado:**

Um SGBD deve prover um subsistema de seguran√ßa e autoriza√ß√£o, o qual o Administrador do Banco de Dados (DBA) usa para criar contas e especificar restri√ß√µes de acesso. O SGBD, ent√£o, assegura que essas restri√ß√µes sejam aplicadas automaticamente.

Em um grande banco de dados compartilhado, √© comum que muitos usu√°rios n√£o devam ter acesso a toda a informa√ß√£o (dados confidenciais como sal√°rios e b√¥nus). Al√©m disso, alguns usu√°rios podem ter permiss√£o apenas para leitura, enquanto outros podem realizar altera√ß√µes (manipula√ß√£o de dados).

O DBA √© respons√°vel pela seguran√ßa do banco de dados, garantindo que apenas usu√°rios com acesso adequado possam utiliz√°-lo.

## 4.7 ESTUDO DE CASO: Criando e protegendo o banco da Biblioteca (DDL, DML, DCL, Transa√ß√µes).

O contexto da Biblioteca envolve o armazenamento de informa√ß√µes sobre alunos, disciplinas (livros/itens), professores (funcion√°rios) e solicita√ß√µes (empr√©stimos).

**1. Cria√ß√£o de Estruturas (DDL):**
Usando o modelo relacional e comandos DDL, pode-se criar a tabela `ALUNO` (ou `ESTUDANTE`) e `LIVRO`, por exemplo:

```sql
-- DDL: Cria√ß√£o de Tabela LIVRO (Entidade Regular)
CREATE TABLE LIVRO (
    Codigo INT NOT NULL,
    Titulo VARCHAR(100) NOT NULL,
    Autor VARCHAR(100),
    PRIMARY KEY (Codigo)
);

-- DDL: Cria√ß√£o de Tabela ALUNO, referenciando uma tabela CURSO (se existir no modelo)
CREATE TABLE ALUNO (
    Matricula INT NOT NULL,
    Nome VARCHAR(45) NOT NULL,
    DataNascimento DATE NOT NULL,
    Endereco VARCHAR(45),
    CCodigo INT NOT NULL,
    PRIMARY KEY (Matricula),
    FOREIGN KEY (CCodigo) REFERENCES CURSO(Codigo) -- Integridade referencial
);
```
**2. Inser√ß√£o de Dados (DML - INSERT):**
Adicionar novos livros ao acervo:
`INSERT INTO LIVRO (Codigo, Titulo, Autor) VALUES (101, 'Fundamentos de BD', 'Elmasri/Navathe');`

**3. Altera√ß√£o de Dados (DML - UPDATE):**
Atualizar o t√≠tulo de um livro:
`UPDATE LIVRO SET Titulo = 'Fundamentos de Sistemas de Banco de Dados' WHERE Codigo = 101;`

**4. Gerenciamento de Transa√ß√µes (DTL):**
Se um funcion√°rio registra um empr√©stimo (que envolve reduzir o estoque e registrar o cliente/livro), essa opera√ß√£o deve ser at√¥mica. Se o sistema falhar no meio, um `ROLLBACK` garante que nenhuma parte da opera√ß√£o seja salva. Se for bem-sucedida, um `COMMIT` salva as mudan√ßas.
*Exemplo:* Ap√≥s registrar o empr√©stimo na tabela `EMPRESTIMO` e atualizar a tabela `LIVRO` (removendo da disponibilidade):
`COMMIT;`

**5. Prote√ß√£o e Acesso (DCL):**
O DBA deve restringir o acesso, por exemplo, permitindo que apenas o usu√°rio `bibliotecario` possa `INSERT` e `UPDATE` na tabela `LIVRO`, enquanto o usu√°rio `aluno_consulta` s√≥ possa usar o `SELECT`.

## 4.8 EXERC√çCIOS COMPLEMENTARES: Pr√°tica com DDL e DML em um novo dom√≠nio (Ex: Locadora de Carros).

Utilizando o dom√≠nio de uma Locadora (similar aos exemplos de Vendas/Locadora/Empresa nos fontes), realize as seguintes opera√ß√µes DDL e DML:

**Cen√°rio Base (Tabelas simplificadas):**

1.  Crie a tabela `CARRO` (atributos: `ID_Carro` (PK, INT), `Modelo` (VARCHAR), `Placa` (VARCHAR, UNIQUE), `Valor_Diaria` (NUMERIC)).
2.  Crie a tabela `CLIENTE` (atributos: `CPF` (PK, VARCHAR), `Nome` (VARCHAR), `Telefone` (VARCHAR)).
3.  Crie a tabela `LOCACAO` (atributos: `ID_Locacao` (PK, INT), `ID_Carro_FK` (FK, INT), `CPF_Cliente_FK` (FK, VARCHAR), `Data_Saida` (DATE)).

**Exerc√≠cios DDL:**

1.  Crie o comando SQL para adicionar um novo atributo chamado `Cor` (VARCHAR 20) na tabela `CARRO`.
2.  Crie o comando SQL para alterar o tamanho m√°ximo do atributo `Modelo` na tabela `CARRO` para 60 caracteres.

**Exerc√≠cios DML:**

1.  Escreva o comando SQL para incluir o carro 'Corsa', placa 'XYZ-1234', di√°ria de 75.00, com ID 1 na tabela `CARRO`.
2.  Escreva o comando SQL para atualizar o `Valor_Diaria` do carro com `ID_Carro = 1` para 80.00.
3.  Escreva o comando SQL para registrar uma loca√ß√£o: carro ID 1, cliente CPF '99999999999', na data atual (assumindo que o cliente j√° existe).
4.  Escreva o comando SQL para excluir o cliente 'Jo√£o' (CPF '11111111111').

## 4.9 EXERC√çCIOS COMPLEMENTARES: Exerc√≠cios de Fixa√ß√£o.

Com base em uma tabela gen√©rica `FUNCIONARIO` (colunas: `ID`, `Nome`, `Salario`, `Departamento_ID`), responda √†s seguintes consultas (DQL):

1.  Liste o nome de todos os funcion√°rios e seus sal√°rios.
2.  Liste o ID e o nome dos funcion√°rios que t√™m sal√°rio maior que 1500.
3.  Liste todos os atributos dos funcion√°rios que trabalham no departamento com `Departamento_ID` igual a 2.
4.  Liste o ID, nome e sal√°rio de todos os funcion√°rios, ordenados do maior sal√°rio para o menor.
5.  Liste os nomes de todos os funcion√°rios, mas apenas uma ocorr√™ncia para nomes repetidos.
6.  Liste todos os nomes de funcion√°rios que come√ßam com a letra 'M'.
7.  Liste o nome e o sal√°rio de todos os funcion√°rios, assumindo que eles receber√£o um aumento de 10% (exiba o novo sal√°rio calculado, mas sem alterar o banco de dados).
8.  Recupere todos os funcion√°rios cujo `Departamento_ID` n√£o foi informado (`NULL`).
